Design Document:
Overview:

Collaborative Online Judge System (COJ) is a full-stack system supporting collaborative code
editing, compiling, execution and result judgement. This document covers the details of the
implementation of Collaborative Editor and User Code Executor from an engineering
perspective.

Major Use Cases
1. User can use interactive code editor to edit code. Supported languages are Java, C++
and Python. In addition, we need to keep the capacity for new languages.
2. Multiple users can edit the same piece of code simultaneously. Each user’s change can
be seen and applied to every other user’s code immediately.实时交互
3. User can compile the code by clicking ‘compile’ button. The compile result will be
displayed to user.
4. User can run the code by clicking ‘run’ button. The execution result will be displayed to user.
5. User can browse pre-stored coding problem list.
6. User can get details of a specific coding problem by clicking the problem in the list.
7. User can submit the code through ‘submit’ button to submit the code to solve the chosen
question. The result, including compiling, correctness and running time, will be displayed
to user.
8. User’s submissions will be recorded for reference.
9. User can check his progress / statistics for questions.
10. Admin can manually add new problem.


High-level Stack Diagram
Stack Technologies

Frontend - client Angular.js, Socket.io(通信协议)
Frontend - server Node.js, Socket.io, Redis, MongoDB, Nginx
Backend (executor) Nginx, Flask, Docker


Detailed Design
Collaborative Editor
We are using socket.io as the communication protocol between client and server. The reasons
are:
● Client-server communication is heavy;
● Full-duplex asynchronous messaging is prefered;
● WebSockets pass through most firewalls without any reconfiguration.


Client-side Editor
ACE Editor
Here we have two options to choose an editor for browser: ACE and CodeMirror. They are both
Javascript-based editor for browser and support source code editing. They both support multiple
languages, color themes, programing APIs for advanced usage. (Complete feature comparison
can be found here.)

Programing API is the top-1 feature we should consider. We need to dynamically get and
change the status of the editor. These include getting the change of the content, applying the
change to the current content, and so on. Both ACE and CodeMirror expose a good set of APIs.
We chose ACE as it has been proven to be a stable editor by adopting by Cloud9 IDE. It is
easier to get help from community considering the number of users.


ACE Editor API
ACE editor provides APIs to get and set editor status. The APIs we will use are:


API 											Description
Editor.on("change", function(Object e)) 	Emitted whenever the document is changed.
											e - required. Contains a single property, data, which
											has the delta of changes
Document.applyDeltas(Object deltas) 		Applies all the changes previously accumulated.
											These can be either 'includeText', 'insertLines',
											'removeText', and 'removeLines'.
Selection.on("changeCursor",
function())									Emitted when the cursor position changes.
Selection.getCursor() -> number           	Gets the current position of the cursor.

EditSession.addMarker(Range range,			Adds a new marker to the given Range. If inFront is
String clazz, Function | String type,		true, a front marker is defined, and the
Boolean inFront) -> number  				'changeFrontMarker' event fires; otherwise, the
											'changeBackMarker' event fires.



Server-side
Editing Session
Editing session is the concept similar to file. It keeps file content, list of participants, editing
history and metadata. Multiple users can be in the same editing session, in which case, they
work on the same source file simultaneously.

Users in the same editing session will be synced whenever the source file has been changed. In
addition, users can see everyone’s cursor position in real time.
Editing session will be kept in memory (M) temporarily and stored in Redis (R).

The schema of an editing session:

Name 		Type 		Location			 	Description
session_id 	int 			M, R 				UUID to identify an editing session.
type 		enum 			M, R 				[PUBLIC | PRIVATE | SHARED].
owner 		int 			M, R 				The owner of this editing session.
participants int[] 			M, R 				List of users who can access this session.
												If type is PUBLIC or PRIVATE, this field will be
												ignored;
												If type is SHARED, this field keeps the users
												who can access this editing session (other than
												the owner).
snapshot 	string 			M, R 				Latest snapshot of content.
change_history string[]		 M 					Changes after latest snapshot.
last_updated long 			M, R 				Timestamp of last change.
created 	long 			M, R 				Timestamp of creation.


Type
An editing session type can be one of PUBLIC, PRIVATE and SHARED. If the type is PUBLIC,
anyone with the session_id can access and edit the source file. If the type is PRIVATE, only the
owner can access and edit. If the type is SHARED, the users listed in participants are allowed
to access and edit.

Type is first set to PRIVATE at the time an editing session is created. The owner can make the
editing session public or shared with other users later.
Participants

Participants is a list of users the owner shared with. If the session type is PUBLIC or PRIVATE,
this field will be ignored. If the type is SHARED, we need to check participants list before we
accept an access request (web socket request).
Participants can be modified by owner.

Snapshot
This field keeps the latest snapshot (in string) of the content. The idea of snapshot is we don’t
update content in memory/storage every time it changes. We just store the list of changes since
the last snapshot.

Change_history
When a user makes a change (add an character etc.), the change will be sent to server from
web browser through web socket. Then, the server broadcasts the change to all active sockets
in the same editing session. Everyone else then updates the content on the browser by applying
the change. We will keep the changes in a list.

If a user joins an editing session, the server sends the latest snapshot with the change list. The
user’s browser will apply changes on the latest snapshot to get the latest content.

If the last user in an editing session exits or after a period of time or the size of change_hisotry
exceeds a certain threshold (whichever comes first). The server will update the snapshot by
applying all changes in change_history and update the entry in Redis. This update prevents
the size the of change_history become too large to transfer and sync.

* Change history is kept in memory only. It acts as buffer before flushing to Redis.


Fast Forwarding Restore
It is very natural and common that a new user jumps into an existing session. Or, the existing
user may leave the editing page then come back later. In this scenario, we should resume
user’s editing session by restoring the editor content and fast forward to the latest point.
We have three options here:

● Keep All Change Events
This solution is straightforward: server stores all change events it receives in an ordered list:
[event_0, event_1, event_2 … event_n]. When a new user joins the editing session, server
sends the list of all change events to user. User then applies all changes locally to catch up.
However, this solution is not optimal as the size of events list increases rapidly. It will consume
a lot of bandwidth and memory.

● Keep Latest Snapshot
In this solution, server will not keep all events. Instead, it keeps a latest snapshot of editor
content. Behaving like an ACE editor, the server will keep a local copy of editor content and
apply changes every time it gets a change event. This solution is fast and memory efficient
when restoring content for user - just send the snapshot. However, it loses the ability to roll back
to an old point or “undo” some operations on server side.

Combine Snapshot and Change Events (Adopted)
This solution combines the above two. Server keeps a snapshot before a certain point (e.g. 1
hour before), and list of change events since that point: {snapshot_n, [event_n, event_n+1,event_n+2 ...]}.
This solution limits the size of event list, as well as keep the ability for rolling back.

Snapshots and change events are stored granularly based on the frequency of access.

Location 				Content
memory 					 List of change events since last snapshot.
Redis  					 Latest few (TBD) snapshots.
Disk / Database 		 Old snapshots.


User Code Executor
We allow users to submit their code through web UI. We will try building and running code
behalf of user. For security reason, we cannot execute user code directly on server. We can
utilize
1. language specific security tool/package: SecurityManager in Java, Pypy in Python etc.
2. Container technology: Docker etc.
3. Virtual machine: VirtualBox, Vagrant etc.

Here we compare pros /cons of different approaches:

Options 							Pros 							Cons
Language Specific 				Small overhead;					Need configuration for each language;
Tool/Package 													Need clean up work after the execution;.

Container 						Lightweight;					Weaker OS isolation;
							Quick to initialize;

Virtual Machine 			Complete isolation; 				Slow to initialize;


Container is an obvious winner if we want to support multiple languages and don’t worry about
performance too much.

Executor Server
We are going to use Docker container to execute user-submitted code on server. In order not to
slow down the frontend server (Node.js server), we should deploy Docker container on backend
server and make it accept execution requests coming from frontend server.

Docker
With Docker Hub, we are able to pre-create a container image with all necessary environment &
tools ready, then use it on all execution instances. This approach needs one-time image
download and initialization every time it executes code. Considering the fast initialization and
loose time constraints, it is OK to accept the initialization time.

Task Dispatcher
In order to make the system scalable and easy to maintain, for each language, we can set up
individual Docker image. In this structure, we need a dispatcher to dispatch execution tasks
based on language type.

Problem right now:
Authentization;
editor;

Install Redis: 

wget http://download.redis.io/redis-stable.tar.gz
tar xvzf redis-stable.tar.gz
cd redis-stable
make


cd utils
sudo ./install_server.sh

sudo service redis_6379 start

Start redis:  redis-cli

oj-server: 
npm install --save redis

redis client; 

Observables and Angular 2 pipes

Outline
RxJS and Observables
● Introduction
● Create observables from scratch
● Subject
● Create observables from events/arrays
● Other creation operators: interval, timer and range
● Useful operators: map, pluck etc.
Filter problems with a custom search pipe in Angular 2
 Angular 2 built-in pipes
 Custom search pipe 如何自己订制一个pipe

What is Reactive programming? 是一种编程模式，是一种基于事件的异步的数据流的处理；数据流可以来自于很多source；
异步请求；
● Programing paradigm that works with event-based asynchronous data streams
● Data streams can be created from many things
○ UI Events
○ Http requests
○ File Systems
○ Array-like Objects
○ Memory/Cache

https://www.youtube.com/watch?v=ei7FsoXKPl0&t=1115s
https://gist.github.com/staltz/868e7e9bc2a7b8c1f754


A stream? 时间序列； Marble diagram；
A sequence of ongoing events ordered in time
Emits values, error or complete signal

Marble diagram  

indicates an event with some value e.g. coordinates of a click  -> indicates an error -> indicates that stream has completed

Observable

1.Observables are an invokable collection of future values or events, used to
watch these streams and emit notifications when a value, error or complete
signal is returned.

本质上是类似于数组一样的数据结构，没有index； 只有时间的节点作为坐标；Observable 的序列用来监测data stream；

2.Observables can be subscribed to by an observer

3.Observables will constantly watch streams and update accordingly

4.We can interact with data streams as any regular arrays
像常规的数组一样处理 异步的数据流的处理变得非常简洁明了；


Reactive Extensions / ReactiveX
A library for composing asynchronous programs by using observable
sequences

Provides a long list of operators which allow us to filter, select, transform,
combine and compose observables

Reactive Extension Implementations：
JavaScript：RxJS；

What will we cover in the coding part? 代码部分需要完成的任务：

● Create observables from scratch
	observable and promise
	essential concepts: observable, observable execution, observer, subscription
	pull vs push

Subject
Create observables from events/arrays
Other creation operators: interval, timer and range
Useful operators: map, pluck etc.

Observable and promise: analogy
Promise
let promise = new Promise(resolve => {
console.log('promise execution');
setTimeout(() => {
resolve('promise resolved!');
}, 1000)
});
promise.then(value => console.log(value));


Observable
let stream$ = new Observable(observer => {
console.log('observable execution');
setTimeout(() => {
observer.next('observer next value!');
}, 1000);
});
stream$.subscribe(value => console.log(value));



import {Observable }  from 'rxjs';
import {Component} from "@angular/core";

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})

export class AppComponent {
  title = 'Observables';
  ngOnInit():void{
    let promise = new Promise(resolve => {
      console.log('promise execution');
      setTimeout(() => {
        resolve('promise resolved');
    }, 1000);

    });

    promise.then(value => console.log(value));

    let stream$ = new Observable(observer => {
      console.log('observable execution');
      observer.next(1);
      observer.next(2);
      setTimeout(() => {
        observer.next('observer next value');
      }, 10000);
      observer.next(3);
    });

    stream$.subscribe(value => console.log(value));
  }
}

Observable 可以return多个值（不管是同步还是异步的，同步异步交叉），而Promise只可以return一个值；
Observable and promise: differences
1.Observables can return multiple values, synchronous or asynchronous
Promise can only return one single value
Observable是可以cancel掉的，Promise就必然会resolve 或者是 reject；
1.Observable can be canceled, Promise cannot be canceled,

取消一个subscribe；
变量名不能加$； 一个变量名后面加$ 就是stream；

Essential concepts:

1.Observable creation
	manually: new Observable(function subscribe(observer) {..}) or
	Observable.create(..)
	creation operators: of, from, interval etc.

http://reactivex.io/rxjs/manual/overview.html#observable


Essential concepts

Observable subscription
subscribe calls are not shared among multiple Observers of the same Observable. When
calling observable.subscribe with an Observer, the function subscribe
Observable.create(function subscribe(observer) {…}) is run for that given
Observer.
Subscribing to an Observable is like calling a function, providing callbacks where the data
will be delivered to.


What is a Subscription? A Subscription is an object that represents a disposable resource,
usually the execution of an Observable.


Essential concepts

Observable execution 每subscribe一次，会执行一次函数的备份；取一个instance 出来从头到尾；

The code inside Observable.create(function subscribe(observer){…}) represents an
"Observable execution", a lazy computation that only happens for each Observer that
subscribes.

function subscribe(observe)  只有subscribe 的时候才会执行；


● There are three types of values an Observable Execution can deliver:
a. "next" notification: sends a value such as a Number, a String, an Object, etc.
b. "error" notification: sends a JavaScript Error or exception.
c. "complete" notification: does not send a value.

Essential concepts
Observable execution disposal (unsubscription)

When observable.subscribe is called, the Observer gets attached to the newly created
Observable execution, but also this call returns an object, the Subscription.

With subscription.unsubscribe() you can cancel the ongoing execution.

Each Observable must define how to dispose resources of that execution when we create
the Observable using create(). You can do that by returning a custom unsubscribe
function from within function subscribe().

Essential concepts
Observer
What is an Observer? An Observer is a consumer of values delivered by an Observable.
Observers are simply a set of callbacks, one for each type of notification delivered by
the Observable: next, error, and complete.

● Observers are just objects with three callbacks, one for each type of notification that an
Observable may deliver.

● All three types of callbacks may be provided as arguments, just like Promise callbacks

What can be neglected（哪些东西可以省略）（代码是非常详尽版）
1.Observable execution callback function name subscribe
2.Observable execution returned function name unsubscribe
3.Observer callback function names when provided as arguments
4.The last one (complete) or last two (error and complete) observer callbacks.
Note: can not neglect first one when 2nd one present, similarly cannot neglect 2nd one
when 3rd one present.


Pull vs Push
● Observables are lazy Push collections of multiple values.
● Pull and Push are two different protocols how a data Producer can communicate with
a data Consumer.

Pull vs Push

● What is Pull?
In Pull systems, the Consumer determines when it receives data from the data
Producer. The Producer itself is unaware of when the data will be delivered to the
Consumer, e.g. : functions, iterators

● What is push?
In Push systems, the Producer determines when to send data to the Consumer. The
Consumer is unaware of when it will receive that data, e.g. Promises, Observables

Producer 											Consumer
Pull Passive: produces data When              Active: decides when data is
requested.   									requested.


Push Active: produces data at its own  	     Passive: reacts to received
pace.	 										data.

Pull vs Push
Observables are lazy Push collections of multiple values.

			Single   			Multiple

Pull       function             Iterator

Push       Promise             Observable



Pull and Push are two different protocols how a data Producer can communicate with a data Consumer.

Pull vs Push
Summary:
A Function is a lazily evaluated computation that synchronously returns a single value on
invocation.

A generator is a lazily evaluated computation that synchronously returns zero to
(potentially) infinite values on iteration.

A Promise is a computation that may (or may not) eventually return a single value.

An Observable is a lazily evaluated computation that can synchronously or asynchronously
return zero to (potentially) infinite values from the time [4] http://reactivex.io/rxjs/manual/overview.html#observable it's invoked onwards.


Subject(特殊的Observable)
An RxJS Subject is a special type of Observable that allows values to be multicasted to many Observers.

A Subject is like an Observable,but can multicast to many Observers. Subjects are like EventEmitters: they maintain a
registry of many listeners. 可以被多个Observable subscribe的； 

每个Observer都有一个事件发送的过程；

Every Subject is an Observable. Given a Subject, you can subscribe to it, providing an Observer, which will start
receiving values normally. From the perspective of the Observer, it cannot tell whether the Observable execution is
coming from a plain unicast Observable or a Subject.

每个Subject既可以是Observable 又可以是Observer； 

Internally to the Subject, subscribe does not invoke a new execution that delivers values. It simply registers the
given Observer in a list of Observers, similarly to how addListener usually works in other libraries and languages.

Every Subject is an Observer. It is an object with the methods next(v), error(e), and complete(). To feed a new value to
the Subject, just call next(theValue), and it will be multicasted to the Observers registered to listen to the Subject.


BehaviorSubject： Subject的一种具体的variant   会maintain的一个 current value;当前会存储一个最近的发送的值；
任何时候有新的Observer subscribe我，我都会把新的value 发送给你，说这是我现在的状态；

BehaviorSubject是有状态的Subject；

● One of the variants of Subjects is the BehaviorSubject, which has a notion of "the
current value". It stores the latest value emitted to its consumers, and whenever a
new Observer subscribes, it will immediately receive the "current value" from the
BehaviorSubject.

● BehaviorSubjects are useful for representing "values overtime". For instance, an
event stream of birthdays is a Subject, but the stream of a person's age would be a
BehaviorSubject.

Subject 相当于一个Event Emitter；

$表示这个变量是一个Observable； 








